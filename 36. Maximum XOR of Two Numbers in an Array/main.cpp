#include "test_runner.h"
#include "profile.h"
#include <math.h>
#include <list>
using namespace std;

class Solution {
public:
	int findMaximumXOR(vector<int>& nums){
		//XOR обозначается символом ^, это сумма по модулю 2
		int answer = 0;//, temp;
		for (int i=0; i<nums.size(); i++){
			for (int j=i+1; j<nums.size(); j++){
				//cout<<"i,j=["<<i<<','<<j<<"] numbers=["<<nums[i]<<','<<nums[j]<<"] "<<(nums[i]^nums[j])<<endl;
				
				//780 ms
				/*temp = nums[i]^nums[j];
				if (temp > answer){//Скобки вокруг (nums[i]^nums[j]) обязательны! Иначе будет неправильный порядок операций
					answer = temp;
				}*/
				
				//970ms
				//answer = max((nums[i]^nums[j]), answer);
				
				//740 ms
				if ((nums[i]^nums[j]) > answer){//Скобки вокруг (nums[i]^nums[j]) обязательны! Иначе будет неправильный порядок операций
					answer = nums[i]^nums[j];
				}
			}
		}
		return answer;
	}
	
	int Internet_findMaximumXOR(vector<int>& nums) {
			int n = nums.size();
			
			if (n == 0 || n == 1)
				return 0;
			if (n == 2)
				return nums.at(0) ^ nums.at(1);
			
			list<int> set0;
			list<int> set1;
			int i;
			int j;
			int maxValue;
			
			for (i = 30; i >= 0; i--) {
				for (j = 0; j < n; j++) {
					if ((nums.at(j) & (1<<i)) == 0)
						set0.push_back(nums.at(j));
					else
						set1.push_back(nums.at(j));
				}
				
				if (set0.size() != 0 && set1.size() != 0) {
					maxValue = pow(2, i);
					break;
				}
				else {
					set0.clear();
					set1.clear();
				}
			}
			cout<<"set0 "<<set0<<endl;cout<<"set1 "<<set1<<endl;
			
			if (i == -1)
				return 0;
			
			maxValue += Internet_getMaxXor(set0, set1, i-1);
			
			return maxValue;
	}

	int Internet_getMaxXor(list<int>& set0, list<int>& set1, int pos) {
			int maxValue;
			list<int> set0list0;
			list<int> set0list1;
			list<int> set1list0;
			list<int> set1list1;
			int i;
			list<int>::iterator it;
			
			if (set0.size() == 0 || set1.size() == 0 || pos < 0)
				return 0;
			
			for (it = set0.begin(); it != set0.end(); it++) {
				int value = *it;
				if ((value & (1<<pos)) == 0)
					set0list0.push_back(value);
				else
					set0list1.push_back(value);
			}
			
			for (it = set1.begin(); it != set1.end(); it++) {
				int value = *it;
				if ((value & (1<<pos)) == 0)
					set1list0.push_back(value);
				else
					set1list1.push_back(value);
			}
			
			if (set0list0.size() == 0 && set1list0.size() == 0)
				maxValue = Internet_getMaxXor(set0, set1, pos-1);
			else if (set0list1.size() == 0 && set1list1.size() == 0)
				maxValue = Internet_getMaxXor(set0, set1, pos-1);
			//Действия выше - если этот рпзряд совпадает у всех, поэтому переходим к младшему
			else {
				int maxValue1 = Internet_getMaxXor(set0list0, set1list1, pos-1);
				int maxValue2 = Internet_getMaxXor(set0list1, set1list0, pos-1);
				maxValue = pow(2, pos) + (maxValue1 > maxValue2 ? maxValue1 : maxValue2);
			}
			
			return maxValue;
	 }
};

int main() {
	/*
	{
		vector<int> input = {3,10,5,25,2,8};
		int answer = 28;
		auto real_answer = Solution().findMaximumXOR(input);
		//cout<<"Input: "<<input<<endl<<"My answer is "<<real_answer<<" and real answer is "<<answer<<endl<<endl;
		ASSERT_EQUAL(real_answer, answer);
	}
	
	{
		vector<int> input = {0};
		int answer = 0;
		auto real_answer = Solution().findMaximumXOR(input);
		//cout<<"Input: "<<input<<endl<<"My answer is "<<real_answer<<" and real answer is "<<answer<<endl<<endl;
		ASSERT_EQUAL(real_answer, answer);
	}
	
	{
		vector<int> input = {2,4};
		int answer = 6;
		auto real_answer = Solution().findMaximumXOR(input);
		//cout<<"Input: "<<input<<endl<<"My answer is "<<real_answer<<" and real answer is "<<answer<<endl<<endl;
		ASSERT_EQUAL(real_answer, answer);
	}
	
	{
		vector<int> input = {8,10,2};
		int answer = 10;
		auto real_answer = Solution().findMaximumXOR(input);
		//cout<<"Input: "<<input<<endl<<"My answer is "<<real_answer<<" and real answer is "<<answer<<endl<<endl;
		ASSERT_EQUAL(real_answer, answer);
	}
	
	{
		vector<int> input = {14,70,53,83,49,91,36,80,92,51,66,70};
		int answer = 127;
		auto real_answer = Solution().findMaximumXOR(input);
		//cout<<"Input: "<<input<<endl<<"My answer is "<<real_answer<<" and real answer is "<<answer<<endl<<endl;
		ASSERT_EQUAL(real_answer, answer);
	}
	
	{
		vector<int> input = {2047,1048576,8388609,16384,127,128,1048575,128,3,1,16,129,63,4,16385,32767,65537,7,16384,32767,65,4194305,8388608,257,255,65,4,32767,32,65,16383,1024,4194305,127,1,255,65,262144,513,31,63,128,16777216,15,4194304,7,8191,8388609,64,8192,127,1024,1048577,127,17,524287,8388609,15,1025,262143,8388609,2047,255,32769,8,16383,2097152,3,524287,1023,4095,4194305,4097,262145,32767,17,512,16777215,131072,262143,65535,9,255,32,255,1048577,16777217,32767,16777216,16383,127,524288,262143,262145,4194305,32769,3,1023,16383,5,262144,8193,524289,2048,524288,262144,8192,4194305,63,3,129,1023,16383,2047,524289,1025,4194305,1048577,3,2097152,129,65537,31,32,8,32,65537,511,128,262143,8193,4194304,513,4095,262145,3,1,1024,16384,32767,129,8388608,8388609,524287,65,5,17,32769,8,9,16384,262143,1048575,2049,262143,32768,16777216,524289,131073,16383,512,131073,255,131073,33,8193,4,8388607,1048575,4097,65536,8388609,4194303,32767,15,5,65,4194305,131071,129,257,16,16384,17,3,4096,1,1025,5,16777217,8,4,32769,5,1024,16777217,131073,2048,32,8193,63,31,33,16777216,8388607,32769,127,262143,4194304,8388608,1025,2,4194304,5,8388607,262144,32,33,511,4,511,63,8388607,4194305,128,4096,256,65536,1048575,1048575,32769,1,255,65537,513,65,15,7,1048577,15,5,524287,16384,9,131073,65537,65536,1048577,64,16384,65537,65535,2097151,4194304,4194303,64,1048576,2047,524288,511,2097151,65,127,524288,32767,3,262144,262144,1023,255,1,4095,16385,131072,32769,2047,16777217,32767,524287,2,8388608,7,32767,16777217,31,4194304,2097153,129,131071,511,1048576,524288,33,16,15,128,8388609,33,1023,2097151,63,262144,17,32768,8388608,33,31,16777216,2097151,5,127,4095,63,256,2097151,262145,4,64,5,4097,64,16383,262144,4194303,8,131073,8388609,17,16383,4194305,65,65535,1048576,33,4194303,131073,15,524287,16777216,4095,3,8388608,32769,1024,131072,31,65,524288,2,2049,8192,2048,8388607,31,4096,1023,262143,1048575,8388608,64,1024,63,33,8388609,65535,16777215,16385,2049,2047,32768,17,2097151,63,65537,15,255,16777215,16777216,16383,256,524287,131073,16384,2047,9,128,1024,65535,8191,4095,131073,128,262144,131073,3,128,262144,129,1,16,131072,4095,16384,2048,8193,2097151,262143,16777215,5,255,3,255,8,4097,2048,63,16,8192,257,4095,262144,64,16385,4096,2047,16777217,1048577,7,2049,2097153,8193,8193,16777217,1023,524287,512,4194305,4194304,32767,32768,4194305,127,1048575,32767,8388609,2047,128,65,2047,2097153,32767,8192,512,9,262143,15,262143,2047,32768,7,32767,9,17,4194304,511,16,131072,8191,1023,512,131073,1,524287,1048575,32769,8388607,8192,16777215,32,63,128,1024,4096,1024,15,1048577,256,511,129,1048575,257,1048577,8388609,16383,262145,17,131073,128,2097152,513,127,15,16777216,16777215,1025,16384,16777217,1025,511,16777215,16383,8191,1023,3,4194305,64,131071,1023,32,2097151,16385,16383,131073,131073,1048576,256,7,16383,16384,65537,2049,2097151,255,8192,9,8388609,4194304,16383,8388607,4194305,2097151,8191,8193,8388608,4096,1025,16777217,2,8388607,8388607,513,8388608,511,2048,65,4194305,8192,3,2048,4194305,32767,1024,4,524287,1024,8193,8388609,524289,63,2097153,16384,256,4194305,7,513,4194304,262143,524288,262144,31,32,2,8192,65537,4095,17,32769,1025,257,33,131071,65,524289,256,4194305,4194305,1025,1,31,65535,256,16384,524287,2097152,16384,8388608,65537,33,4194305,65535,3,131072,15,32,63,31,262143,16384,9,31,31,2047,31,32768,524288,7,512,32767,64,2097151,262144,1025,131071,8191,32,513,131071,17,513,262144,4,524289,256,262145,16777217,127,127,129,8388608,524287,262145,128,1023,4194304,1048576,16384,32767,257,2049,32767,1048576,16,8388607,32767,131072,4194303,524287,262144,16385,16383,16777216,511,2048,5,524287,127,131073,17,32769,8388609,131072,127,2049,16385,8388607,4,32768,4095,4096,262145,262144,1023,8388608,2049,3,256,16777216,32767,262143,32768,524287,129,1048575,9,2047,524288,3,1,9,131072,16383,16777217,17,8,1048575,8388609,16777217,65535,16777215,32769,1023,32768,2097153,4096,262143,15,32767,32769,255,9,3,1,4095,128,16385,31,4194304,2047,524289,65537,16777217,1048575,2047,15,4194303,8192,33,1,1048576,262143,524287,32767,4095,8,2097153,16777217,8193,1048575,1048577,32,262144,1048575,4097,1024,8388609,513,32768,17,2,131073,32768,65,16777216,16777215,524288,4194303,131072,1023,3,131072,2048,2097152,255,16,131071,15,16777217,65537,16383,8192,256,1024,131071,524289,128,32768,257,1025,512,16777215,262145,16384,32767,262143,16385,513,131071,2097152,4194305,524287,8193,65,127,4194304,4,512,7,4194304,8,15,65535,1023,257,31,16777217,2097153,32769,1023,1,524288,1024,4194304,3,2,2097152,262145,3,16777217,511,4097,64,262144,31,32768,63,4096,3,31,1048577,128,65537,4097,17,16385,1023,513,32769,16777217,17,9,256,513,8388607,8388609,129,2097153,1048577,16385,9,1048575,256,9,262144,16777217,8388607,1048576,1025,4,16,511,256,4096,513,16,2097152,9,262143,32769,16777217,262144,128,4095,2048,524289,8,7,16384,2049,2097151,511,1,32767,524289,2047,128,16,16777215,524289,1,3,131073,4096,8388609,65537,65,2049,64,65537,2097151,262145,8,1048575,2097151,2,2097153,1023,513,1024,262143,131073,8388608,2048,16,15,4096,32,513,5,4194303,1048577,16384,32767,2047,255,1024,4194304,65535,1048577,2047,262143,8191,1048575,32768,524289,16777217,8191,2049,9,131071,65537,4096,4097,1048575,1048577,4095,262143,8191,127,9,128,33,64,8,4,524289,64,65536,512,4194304,32769,255,127,2047,511,9,1025,8388608,2048,2097152,15,16384,4194304,4097,1048577,32767,1048575,16384,262144,16777216,32769,1048575,7,127,262145,1,257,255,8193,262144,2097151,8388607,16384,1025,4097,16777215,524287,262143,524287,65,8388609,8,2,2049,131072,17,2097153,8388607,511,65537,16777216,16384,1025,2049,1,16777215,524288,4097,2047,262143,524289,8192,7,511,131072,1048577,131073,1048576,16777215,4194305,262145,256,4194305,4194305,8193,3,4096,32767,65535,2097153,4096,4096,513,262143,8388609,65,4095,524288,255,1024,1,1023,8388609,1,1048575,129,7,3,32768,32768,524288,16777217,512,4194305,4096,131071,16383,4095,16384,8191,4097,16383,128,262144,8388608,32767,65536,127,5,65535,257,131072,31,1023,1024,4097,1,131073,16777217,5,16777216,1023,32767,32768,1025,257,32768,16384,9,2048,4194305,1,15,524287,65537,63,127,32767,131071,524288,7,15,4194305,16777215,262144,65,16383,512,131071,257,16777215,1048575,16777215,4097,255,32768,17,524288,1024,16384,4,32,4194304,1048576,131072,8192,1023,2,63,8388608,1023,1,16777215,3,513,524289,31,4095,64,65535,65535,4194304,8388607,2047,3,1,1025,262143,2097151,1048575,4096,2097153,4194305,2097151,32769,16384,257,9,16777217,65,1024,2,2,1,511,33,65535,4194304,2097151,2049,1024,16777216,5,65536,63,16384,127,524289,32,2049,131071,262144,65535,3,15,65536,16384,16777217,129,257,3,3,8388607,129,524287,1048575,2049,2097153,65537,32,1048577,8388608,16777216,524287,524289,262143,3,33,4194303,1048575,32767,4194305,1023,511,2048,2097151,2097153,8192,8191,4194305,15,5,4,3,262143,2048,524287,65537,33,524289,65535,4194305,8192,4194303,131073,3,256,131072,16385,257,65537,1024,3,131072,2049,524289,9,65537,524287,513,4096,63,4097,131072,262145,1025,9,8191,1,4097,16777215,8388607,524287,8388609,9,31,15,131071,8193,1025,65535,15,2097151,129,257,31,262144,131071,4194303,131072,8388607,524289,16777216,65535,16777217,32767,8192,2048,7,128,17,131072,4194303,8388608,2,4096,5,524287,16383,16777217,1023,2047,7,262143,1024,16384,1023,8388609,16777217,1025,131073,1,2049,2048,131072,16383,4097,32,4194304,4194303,1048576,32767,17,2047,1048576,4095,1048575,7,2047,5,2048,128,31,8193,2,1024,32768,131073,4096,2049,131073,262145,4194303,4095,1024,3,65,257,32,15,131073,8,16384,3,31,16777217,8388608,16383,64,511,16777215,1,4194304,16777217,2097153,256,4097,4,2048,16,2,262143,32767,16777215,524288,16383,8388608,16777215,524287,524288,16383,127,1,8388608,131073,64,2097153,1024,9,262143,16777215,16384,1048576,513,2047,4194304,16777215,32,2097152,8191,262144,5,5,513,8,65537,4096,4,2,513,1048575,524289,4,65537,1048576,17,1,1048576,2097153,129,2049,65537,2097152,1,16777217,8192,4097,7,4,33,4194305,4194303,2047,65,8192,1,256,64,256,1024,131073,31,16,256,4097,7,64,131073,64,8388608,8388609,16385,513,2097153,8193,8388609,131071,32769,4096,8388609,1023,1048577,65537,262144,32,2097153,2097151,8388608,32767,65535,524288,33,1023,8388609,513,256,2097152,2097152,131071,513,16777215,15,16777217,3,2049,65,1048577,511,8191,65535,16,511,262143,2097151,127,3,2048,15,16384,8388609,65536,1025,17,2049,32767,33,1025,4097,3,64,31,16385,16384,2097152,2048,4096,4096,524287,9,8193,1048577,1025,2047,7,16384,4194303,128,8388609,8193,512,1048575,2048,33,32768,2,513,4194303,63,31,31,512,16777216,256,2047,8388608,4194305,64,1048577,127,131073,2097152,4,32768,8388609,16777216,1048575,4096,128,17,131073,1048575,3,1024,131071,1025,65,65,131072,2097151,4194305,127,2097152,511,4,1025,257,3,127,2097153,1048576,8192,65,15,64,2,1048575,512,524287,512,2047,64,2049,32769,64,1025,17,2048,513,32,524287,262143,2,255,127,513,131073,63,64,17,7,513,65537,8191,8192,257,256,255,8388608,256,255,131073,2,16777217,256,2097152,127,4097,1,8192,1048575,524287,2097151,4097,32,8191,4096,65537,65535,33,17,5,513,65,511,8388607,16384,2097151,16,4194304,32769,16384,16777216,32769,1024,8193,64,2048,131072,32769,262144,16384,2097151,16777216,131072,1,1023,257,8388609,32767,524288,257,8193,255,3,127,4194304,32768,3,257,16384,511,524289,32767,4194305,32768,2097152,1,131073,15,256,16,2097151,4096,32768,17,131073,511,4095,64,262143,262145,255,16,8388607,16385,3,1048576,4096,2049,524287,127,129,4,1023,64,8,2048,8192,256,16384,2097152,4194305,65,128,257,16385,1048575,8192,5,4194303,8,262145,15,8192,65536,513,65536,1048575,4096,3,65,128,4096,33,128,15,4194305,131072,524288,4194303,8388608,16777215,262143,32767,127,1025,524288,4194303,4194305,32767,127,1048575,511,9,8191,65535,2097152,5,2049,512,8191,129,2097153,1048575,131071,524287,17,16777215,17,513,8388609,262143,8192,2048,4096,524288,16384,131073,524287,32768,64,2097152,4096,32767,64,262143,32769,32769,2048,8388607,65537,8388607,65,16,17,9,255,65535,16777217,4095,1048576,16777217,1048576,65535,2,131073,4097,2,1025,2097152,8192,2048,8388608,524288,131073,511,7,513,262143,262143,17,16777217,131073,32768,4096,31,524289,65,65536,16385,524289,4194303,1024,2097152,32,63,2049,2,128,1048576,8388608,513,8191,1025,8,65536,128,8192,64,32767,8388609,65536,1,524289,65536,262144,16777217,8388607,4,131072,2047,4096,524289,16383,3,8388609,131072,1024,32768,16777217,16385,262145,16,524288,256,3,5,524288,8,17,127,2097153,4194303,2097153,63,8388609,64,255,131072,8388609,8388609,1024,32,8388608,16383,1,65535,257,1025,8388608,262144,1024,2048,31,4096,32767,9,32769,32,16777217,262145,262145,262145,4194304,3,2097153,2048,9,32,129,1048576,3,2097153,2097152,8193,4194304,16777216,4194304,513,3,2048,65537,8388609,1025,16383,8193,8193,8388609,64,32,2047,65,2049,4095,4194305,5,8192,65537,1048577,65537,1048576,257,4194305,511,8192,5,511,262144,16384,3,32,127,2049,2,131072,8388608,65536,16385,1025,524288,2097151,4194305,129,4095,3,16385,4095,524288,16385,8193,16777216,127,511,262144,8191,8388608,1048575,131071,524287,1048577,2097153,63,8,1023,524289,1,16383,1023,256,8193,4194305,7,65537,131072,1048577,131073,129,2097151,65536,9,3,65537,65535,4095,3,33,7,131072,31,8,4,4096,8193,32769,1,129,5,65537,1048575,256,8388607,65,16777217,64,8388607,129,128,32768,33,8192,2097151,262144,2047,65536,64,262143,4,2049,17,1023,65536,64,8191,257,512,524288,16383,63,8388608,32,16,63,33,2097153,262145,16777217,31,17,16383,1048576,16777215,262143,8191,31,513,4194304,131071,1048577,257,8191,262144,127,1025,7,33,129,513,32768,257,1024,64,2048,2049,1048576,9,65535,1048577,262143,33,1048575,1023,3,16384,4194305,4097,524288,1,32769,16385,16777215,513,2,2097151,9,2097153,15,524287,8388607,3,257,513,511,8192,4097,16385,262143,2049,16777216,524288,129,8388609,8388609,16777215,2097152,2049,131072,131071,1048575,131071,16777216,524289,8192,65535,2097153,513,2049,17,2048,524289,2,8191,4194305,1048577,524289,524287,16385,16383,128,1048577,1048577,31,16777215,9,1023,131072,16384,8,4095,511,16385,131071,2097151,128,512,17,16777215,262145,65,256,4095,8388609,32769,8193,8193,8388608,1048575,5,4194305,128,31,1025,4,5,256,65,4097,511,1024,8388609,33,1025,2097153,32767,65537,262145,65537,4194305,4095,32769,131072,1025,257,262143,4194304,16777217,8388609,2097151,1025,524287,2047,128,16383,8193,131071,512,65,524288,256,63,8388607,131071,8388609,2,7,512,2,131072,16777215,32769,512,131072,32768,65,32769,4194305,16385,257,4194304,262143,255,16777216,16384,16384,16385,4,262144,1048575,2097153,65535,1048576,511,8388607,8388609,524287,8193,262144,1025,16777215,4194303,524287,131071,4096,4,1,1048577,8388609,513,63,257,65537,32,8191,2047,15,4194304,131072,3,63,255,1048577,65,65537,127,524288,8388609,8191,1023,63,4,2048,32767,16777215,8388609,255,1048577,17,8388608,513,16777215,524287,1023,8193,127,65,256,2048,33,257,257,16,8191,512,7,262145,4096,8191,256,65537,16384,65537,2097152,2097152,9,2047,1024,1,8388608,1,64,4194304,7,256,524289,8388607,255,131071,129,15,257,1023,524289,2097151,63,4194304,33,3,2047,256,4194305,1024,131073,64,3,257,2097153,524287,131073,512,262143,8192,513,1023,9,2049,15,262145,127,3,2047,4194305,9,1048576,7,8,1024,3,131072,33,524289,7,8191,262143,1023,262143,524289,4095,131073,2097151,262145,524289,65537,8388608,262143,524289,16384,4095,2049,262144,16777215,1048575,8388607,64,32,1023,513,4194304,16384,1025,8388607,33,4097,1048577,17,32,16384,17,7,33,524288,4095,3,2097151,4096,129,129,64,65535,16,2097152,4095,2097152,262143,128,1024,7,16385,65535,128,524288,16777215,4194303,33,2048,16777215,8388607,32768,512,2097151,15,2,16385,8,255,262144,63,1023,131073,65,131073,64,17,4,512,2097153,4096,511,8388607,524287,4194303,262143,65535,2097151,8191,131071,64,64,127,131072,2048,4,4,1025,2097151,3,511,16,1048575,2097153,16383,2047,2047,129,511,1024,2048,8192,513,1025,16384,127,1048577,3,32767,4097,3,255,2097151,31,262143,128,1023,524287,16384,65,8191,513,65,33,31,65,4194303,8388609,32767,5,64,16777216,1048577,1048575,2097152,16,1,8192,2048,4095,1,127,63,32767,65,2047,7,3,1024,1024,1025,17,4,262144,8191,7,129,31,8193,4096,512,16385,9,2,16777217,4,1048577,4194304,131071,8,3,8388608,127,16383,262143,1048576,4,513,16385,131073,32769,16777216,31,524288,2,15,65,257,128,512,1024,32767,8192,17,131072,256,65,129,3,1023,4,256,5,65535,32769,4194303,31,16777215,16777217,1024,16,131073,8192,127,524289,4096,524289,2049,9,4194303,32,512,16,8388607,2047,9,131073,65,2,9,4,5,131073,4194303,2097152,4194305,16777217,8388608,128,16,2048,16384,8193,8,63,32,1048576,16385,4,1048577,8192,256,31,8192,4096,262145,32,257,2047,16385,8193,4096,2097152,16777217,17,4096,31,513,32769,2047,256,256,1025,65,257,16385,257,1048575,8,64,8193,65537,128,32768,2,1048576,3,127,4194304,513,4194303,16777215,32767,4097,32768,15,8,31,65,33,3,524287,8191,131072,16777215,3,17,524287,2097151,127,2097152,2047,262143,65537,65535,32767,257,1,2,15,3,2097153,32767,65536,2097151,131071,16777217,1048576,16777217,2097151,4,1,32,129,2047,2097153,512,131073,2097152,65536,33,128,5,8191,2047,65535,1024,8191,2049,2047,2097153,16383,16777215,16383,65,65537,16385,513,1024,262145,262145,255,2097151,1,2047,5,1025,3,4194304,2048,16383,8388609,9,1048577,256,65535,16385,2097152,16777217,512,32,65537,17,17,2097152,255,262145,1024,131073,16777217,32,257,4194303,129,16777216,5,2,1048577,2048,524288,7,255,8191,65536,524289,8388607,1023,131073,524287,16383,8388608,2097153,16384,131071,8191,8388609,9,1023,131072,524288,8193,513,4194305,262145,16,1048577,31,524287,4194305,31,4096,8192,4194303,17,2,33,16777216,8388608,16383,4194305,131071,4095,8388607,4097,8191,512,4194304,4194303,524287,513,131072,1048577,33,16385,32769,4095,32768,513,31,262145,262144,8388607,524288,128,32,3,2097152,4097,65536,32769,4194304,63,4,4096,2,2097151,1,1048576,33,31,128,65535,9,524287,512,2049,8,129,8192,8193,8388607,129,4194304,1048577,262145,33,1048577,32,1025,511,63,4,4194304,512,16384,16777217,262144,4194304,256,16385,2047,524288,127,262145,16384,63,65,32768,262143,1048577,513,8388608,2097153,2047,65,4194304,4194303,16777216,524287,2048,4194304,257,8,15,131073,524288,1048576,5,255,2049,7,33,4194305,1048577,4,1025,63,3,2097153,262145,3,32,513,1025,65,16777217,262145,127,8,262145,8191,4,131073,32768,262145,1048575,63,63,2048,524288,131073,1023,1048576,4096,524289,1023,33,262144,16777215,512,32,128,524288,4095,513,511,262144,4194305,1048575,127,2097153,9,16777216,511,131073,16,1048575,8388608,512,16777216,16384,31,16777215,513,1048577,65536,2047,4194305,2097153,5,524288,9,255,33,5,2047,511,131073,65,65535,4,255,8,513,31,256,1048575,131071,1,8388607,16777215,8388608,63,2,511,3,4194304,1,262144,4,524289,3,32767,65535,1,4097,1025,8193,2047,15,1023,257,16777216,128,524287,8,4097,524289,63,32768,2097151,32768,8388608,16777217,2048,2097153,2,15,5,262144,513,32768,524289,2047,131071,8192,512,1048576,1048576,513,1048576,262143,524289,64,8191,31,8,1048577,9,131073,9,511,4095,524288,8388609,32,9,9,511,262144,32768,512,1025,1023,511,131073,1023,31,4095,15,524287,1048575,513,4096,16,32769,524288,4194304,3,127,128,1048577,4096,4097,129,33,262145,4194303,4095,129,7,16384,32,65537,9,256,1048575,3,64,3,4194304,16385,512,65535,16777216,7,511,16777217,2097153,7,8,2097151,524288,8388609,4096,131071,33,63,63,1048575,1048575,4194304,32767,16385,17,32769,65535,1025,262145,2047,3,1048577,2047,1048576,524288,1,1048576,1048577,4096,131073,8191,128,32768,4095,1025,2047,16383,64,65536,1025,17,16,65536,2,2048,131071,262144,524288,131072,1024,16777217,257,2097153,8192,65535,513,15,65535,2,2047,7,9,262143,65536,16385,16384,131073,4095,1048576,32,32769,1023,1048575,32,8192,131073,15,4194303,1,513,2097151,511,8388607,2097151,33,4096,2097151,511,9,262144,16384,131072,2097152,1048576,255,33,262143,16777216,8388609,15,2048,16383,4,65537,16,1025,8,512,17,256,4,65536,524287,16777215,1024,8191,4194304,4194304,5,16777216,513,16777216,255,262144,32,524287,262144,16777215,7,4194305,2047,2097153,524289,512,65535,8388608,4194305,2097152,524288,16,129,9,2097152,16383,8193,33,3,33,7,16384,4194303,1048577,16383,262145,16777217,8192,256,32767,8192,513,15,8388608,32769,4096,32767,65536,8191,8388608,1025,65536,8,127,7,4096,32769,2049,262144,4,256,8193,8,16385,2097153,3,65,7,524289,8192,262143,1048575,3,2097153,511,65,1048577,16777216,3,1023,16385,32,32769,32767,16383,8191,1048575,1024,1048577,32769,131072,32768,1048576,1048575,5,2097151,131072,4194303,16,4095,4194303,5,16,4095,16777216,65,16384,16385,2047,2049,4194305,1,4096,2097151,2097153,8388608,262144,64,8191,8388607,9,511,1048577,1024,512,262144,524288,3,131072,32769,8388609,8388607,7,4095,511,131071,127,1023,16777215,257,128,2097151,4097,2048,4194303,8388607,16777215,1023,8192,16777217,2047,8193,2048,8388609,131071,2097151,31,2047,256,4096,1048575,2097152,129,2097152,4095,2049,64,16777216,4096,524289,3,64,1048577,128,16777215,127,129,1048577,262144,32767,128,4,16777216,262143,5,17,16384,32769,32767,4096,262145,1024,65535,8191,2047,1024,8193,1024,4194303,262143,3,4,8388607,524287,65,2049,16383,17,65537,257,127,17,8388608,257,513,4097,1023,16384,1048575,8388607,16,32,131071,262145,65536,64,511,16384,4097,15,5,63,4096,131072,15,2097152,524287,32,8192,257,5,15,16384,16385,524289,8193,4095,512,8388608,256,15,16777215,1048577,8192,255,1048577,1024,1048576,2048,2048,8,2,16777216,3,4194303,32,524288,33,16383,1024,65535,255,257,2097151,131071,524289,8193,127,128,5,2048,4194305,8388608,131071,8193,8388607,262143,1048577,1024,8192,5,16777216,65535,65535,5,2048,16,256,2097153,65535,262144,63,2,16385,8,4096,4,8193,2048,131071,512,2097151,131071,1048577,513,3,2097152,32769,131071,16,1023,4194305,7,16383,512,4194305,64,2,128,16385,8388609,2,7,16385,17,1048576,4194304,32768,3,1048575,262143,2097151,64,257,131072,16777217,4194305,262143,255,16383,3,513,4095,4,513,65537,127,32768,524287,3,127,3,65537,2097152,256,4095,8192,2048,65537,524289,17,3,262144,2097151,31,65537,262144,32769,33,4194305,513,15,1048575,31,16777216,1024,16385,16777216,262144,65537,32768,512,2,262144,257,524288,131071,16,31,4194303,4095,257,262143,524288,4097,16385,17,131072,8193,127,65536,32768,63,16777216,8192,524287,2097153,64,1048577,1048576,255,127,262143,32767,4194304,17,16777217,63,32768,2047,16385,8,33,8191,8388608,255,32769,2049,131072,2097153,8192,262143,1048577,262144,1048577,8388607,4194303,8388608,16385,2049,8388608,65537,4,32,32768,32769,2097152,4194304,2,513,17,257,8,131072,65535,5,2097152,16,1025,16384,4194303,32,7,8193,3,256,4194304,16384,524288,63,1024,524287,524288,2097151,8193,8,2048,131072,8193,65536,262145,2097152,16383,4194305,1048575,65537,4096,65536,8193,3,1048576,63,262144,1024,513,513,524287,15,32769,1048576,1025,16777217,33,128,131072,4194305,32,513,8191,262143,511,2,16777216,16,8193,524288,128,128,65535,7,2097153,524288,128,1048576,64,32,65535,262144,31,8192,1048577,2048,8191,524287,16385,131073,65536,524288,2097153,3,262145,2097151,2047,1048577,8193,524287,32769,1,131073,1025,2097153,262144,4097,5,262143,1025,129,511,7,129,8193,131073,1023,16777215,262144,31,65,32767,1048577,524289,8388608,15,1024,262145,16384,511,16385,4097,262144,32767,131072,4097,262145,512,65537,8388607,131072,524288,65536,511,8192,3,2049,131073,16385,2097152,513,1023,65535,524287,2,4097,16777217,127,2047,524288,2097153,513,4194304,131072,9,4,33,16777217,3,131071,4194304,4096,4194305,255,4,65537,1048575,256,32769,1,255,16384,7,2049,4095,512,2047,1023,262143,128,128,131071,7,524288,8388607,129,2097152,8193,511,5,131071,65537,524287,16777217,131072,4096,262145,4194303,2048,4194304,3,4194305,63,33,32767,65536,128,8,16383,2,17,4194305,17,65537,8,63,511,131071,2047,1023,63,64,32769,262143,127,524288,1048575,4194304,8193,257,32769,524289,63,9,8192,15,4,524288,257,32767,33,15,4,2097151,1048577,31,4097,2,524287,32768,262145,131073,16385,512,4194304,3,2048,8193,1023,8191,131072,257,131072,2,65537,524288,33,32769,2,9,8191,33,64,4095,1024,15,7,2049,16383,16383,1025,32769,2097153,512,2097151,2048,1023,262143,65537,131073,16777217,32769,31,4097,131072,16383,4095,257,32768,255,9,4097,524288,262143,131073,5,262143,127,16777217,3,15,64,1048576,1024,1048577,33,257,2097153,1025,32768,33,4194304,5,16385,131073,1023,8388608,16,8192,255,15,32,4194303,1024,131072,65536,8388608,8192,3,524288,64,16777215,8388608,4,32769,4096,8193,257,262144,16385,32,65537,8388609,1025,255,32769,127,4194303,131073,511,63,1048575,127,2047,65535,16,262144,4095,16777216,2097153,9,16777215,32767,256,1048576,16384,2049,5,8191,2097152,17,262144,512,8192,17,16385,16,257,64,2048,65535,32767,1048576,8388609,8191,2049,1025,2047,128,17,65535,1023,129,8193,32,8193,1048575,8,4194303,9,65,32768,2097153,16777215,5,65536,8388608,9,512,2,16,131072,2097152,257,131071,65,256,255,5,1048575,4097,16385,16385,65536,1,131073,131072,1048575,256,31,32768,524289,255,262144,32767,1023,1,262143,1024,4194304,129,8,8388607,17,2,32,63,8191,4194303,4194305,1048576,3,31,16777216,131073,4194304,65536,129,3,131072,16777216,16384,129,1048577,65,128,2047,4096,8193,8388607,512,128,2048,16,4097,2048,8388608,64,9,65537,2,17,32767,8388608,4096,16384,16384,4194304,257,32769,4096,262144,8191,3,32,32768,2097151,2048,4096,511,65,3,5,16777216,1024,127,65536,3,2049,2047,65,4096,31,131072,524287,8191,4096,1025,524289,1048575,7,16384,1025,257,4096,16385,524287,131072,1023,8193,16777216,8192,8388608,63,524287,16777216,32,524287,2097152,3,65535,2,32,16777215,131071,2097151,32769,4095,1023,65,1025,16777215,131071,1048577,1024,32768,4194305,128,2,5,32769,513,1048577,63,513,4097,8388609,31,131073,2047,524289,127,524288,513,4194305,32769,2097152,1048576,1048576,513,4097,1023,4194303,4095,65536,1023,513,2097152,4194304,33,2047,32768,16777217,1048575,32,4194305,4194303,4,129,8191,65535,16777215,4095,131072,1023,4097,512,17,8193,2097152,4095,262144,131071,8388608,131073,32767,4,128,255,4194303,4097,131071,65,8388607,511,16777215,2097152,16777215,32,1048577,524287,4194304,1048575,16777215,16384,16383,15,2097152,1048577,8,511,512,2097152,65535,16385,16777216,9,4096,524288,16385,16385,257,32768,256,2097152,32769,32769,31,16383,524288,17,129,8193,8192,1048577,256,524287,65537,31,262145,8,17,16384,31,1048576,65535,2,8191,256,9,32768,65537,8193,524289,64,31,8388607,131071,1048575,7,524289,4194305,3,1024,65537,262144,2097153,4194305,16777217,65536,65,1048577,8388608,8388607,8192,8388608,16385,127,257,8191,5,16383,8192,15,3,257,524287,2,16383,512,65537,2097152,8388609,2097151,16777217,8192,2048,8,131071,4194305,128,63,255,256,8388607,2049,8388608,3,1,262143,262145,1024,8388609,128,4194303,31,262143,65536,3,1023,8388609,512,16777215,32768,8193,4095,2097151,32769,1025,524288,2097153,33,16383,64,1048575,64,31,3,16385,262145,262143,257,257,33,5,2,1024,32769,8,131072,8388608,513,32767,4097,64,5,2049,1048576,1048577,5,16384,9,16385,1048575,4194304,1023,255,16777215,65,1025,16777217,4194305,8388608,65535,2049,262144,1025,262143,4097,16383,65535,3,17,262143,63,8388609,2097153,524288,2097153,2047,262145,1048577,2097153,129,33,1025,513,127,3,31,8191,2,513,257,513,262143,257,8388607,257,2047,131073,32769,16777215,32,9,256,511,32768,2048,32767,16383,5,127,3,8388608,262145,256,4095,3,3,1023,4097,255,8193,16777216,2049,32768,32769,262143,16,8,1048577,16383,1048575,2049,131072,8192,15,31,8193,1048577,63,4095,1024,64,3,2097152,129,1,1638};
		{
			LOG_DURATION("My Solution");//740ms
			int real_answer;
			for (int i=0; i<10; i++){
				real_answer = Solution().findMaximumXOR(input);
				if (i==0){cout<<"Answer is "<<real_answer<<endl;}
			}
		}
		{
			LOG_DURATION("Internet Solution");//90ms
			int real_answer;
			for (int i=0; i<10; i++){
				real_answer = Solution().Internet_findMaximumXOR(input);
				if (i==0){cout<<"Answer is "<<real_answer<<endl;}
			}
		}
	}*/
	
	{
		vector<int> input = {42, 5, 69, 22, 23, 8, 1, 17, 30, 75, 99};
		int answer = 125;
		auto real_answer = Solution().Internet_findMaximumXOR(input);
		//cout<<"Input: "<<input<<endl<<"My answer is "<<real_answer<<" and real answer is "<<answer<<endl<<endl;
		ASSERT_EQUAL(real_answer, answer);
	}
	
	cout<<endl<<"TESTS OK!"<<endl;
	
	return 0;
}

/*
Maximum XOR of Two Numbers in an Array

Given an integer array nums, return the maximum result of nums[i] XOR nums[j], where 0 ≤ i ≤ j < n.
Follow up: Could you do this in O(n) runtime?

Example 1:
Input: nums = [3,10,5,25,2,8]
Output: 28
Explanation: The maximum result is 5 XOR 25 = 28.

Example 2:
Input: nums = [0]
Output: 0

Example 3:
Input: nums = [2,4]
Output: 6

Example 4:
Input: nums = [8,10,2]
Output: 10

Example 5:
Input: nums = [14,70,53,83,49,91,36,80,92,51,66,70]
Output: 127 

Constraints:
1 <= nums.length <= 2 * 10^4
0 <= nums[i] <= 2^31 - 1
*/

/*
//Решение из интернета 

Example input: [42, 5, 69, 22, 23, 8, 1, 17, 30, 75, 99]

The max XOR value is (30 ^ 99) = 125. Below are the binary represntations of each number.

42 = 0 1 0 1 0 1 0

5  = 0 0 0 0 1 0 1

69 = 1 0 0 0 1 0 1

22 = 0 0 1 0 1 1 0

23 = 0 0 1 0 1 1 1

8  = 0 0 0 1 0 0 0

1  = 0 0 0 0 0 0 1

17 = 0 0 1 0 0 0 1

30 = 0 0 1 1 1 1 0

75 = 1 0 0 1 0 1 1

99 = 1 1 0 0 0 1 1

Each number in the array is >= 0 and < pow(2,31). So, any number in the array can be represented by atmost 31 bits (bits[30:0]).
The for loop in findMaximumXOR (lines 17-33) finds the max bit position where some of the numbers have '0' in that bit position and the other numbers have '1' in that bit position.
The numbers that have '0' in that bit position go to set0 and the numbers that have '1' in that bit position go to set1. So, for the example above, we have:
set0 = {42, 5, 22, 23, 8, 1, 17,30}
set1 = {69, 75, 99}
Bit position = 6.
The value obtained by XORing bit 6 between set0 and set1 (forgetting the low order bits) is pow(2, 6) = 64.

Next, findMaximumXOR() calls getMaxXor() passing set0 and set1 to recursively find the max value of the XOR between numbers in set0 and set1 for the remaning low order bits.
The max XOR value would then be 64 + (the max value returned by getMaxXor()).

The first call would be getMaxXor({42, 5, 22, 23, 8, 1, 17,30}, {69, 75, 99}, 5).
What getMaximumXOR() does is for bit position 5, it splits set0 into two sets - the numbers that have '0' in bit position 5 go to set0list0. The numbers that have '1' in bit
position 5 goto set0list1. The same is done for set1 i.e. set1 is also split into two sets set1list0 and set1list1. For this specific example, we have:

set0list0 = {5, 22, 23, 8, 1, 17, 30}
set0list1 = {42}
set1list0 = {69, 75}
set1list1 = {99}

Since at bit position 5 we found set0list0 and set1list1, that means XORing bit 5 (forgetting the low order bits) of numbers between set0list0 and set1list1 woul give pow(2, 5) = 32.
So, the maximum XOR value between numbers in set0list0 and set1list1 would be 32 + (set0list0, set1list1, 4).
Arguing on the same lines, the maximum XOR value between numbers in set0list1 and set1list0 would be 32 + (set0list1, set1list0, 4).
Note that we pair the "opposite" resulting sets to get to the max XOR value i.e. (set0list0, set1list1) and (set0list1, set1list0).

For this specific example the recursive calls would be:

getMaxXor({5, 22, 23, 8, 1, 17, 30}, {99}, 4);
set0list0 = {5, 8, 1}
set0list1 = {22, 23, 17, 30}
set1list0 = {99}
set1list1 = {}

getMaxXor({5, 8, 1}, {}, 3); ==> This call returns 0 as set1 is empty.

getMaxXor({22, 23, 17, 30}, {99}, 3);
set0list0 = {22, 23, 17}
set0list1 = {30}
set1list0 = {99}
set1list1 = {}

getMaxXor({22, 23, 17}, {}, 2); ==> This call returns 0 as set1 is empty.

getMaxXor({30}, {99}, 2);
set0list0 = {}
set0list1 = {30}
set1list0 = {99}
set1list1 = {}

getMaxXor{{30}, {99}, 1};
set0list0 = {}
set0list1 = {30}
set1list0 = {}
set1list1 = {99}

Since both set0list0 and set1list0 are empty, we simply ignore this bit position and check the next lower bit position. So:

getMaxXor({30}, {99}, 0);

set0list0 = {30}
set0list1 = {}
set1list0 = {}
set1list1 = {99}

getMaxXor({30}, {99}, -1) ==>This call would return 0, as bit position is invalid.

getMaxXor({42}, {69, 75}, 4);
set0list0 = {42}
set0list1 = {}
set1list0 = {69, 75}
set1list1 = {}

getMaxXor({42}, {69, 75}, 3);

set0list0 = {}
set0list1 = {42}
set1list0 = {69}
set1list1 = {75}

getMaxXor({}, {75}, 2); ==> This call returns 0 as set0 is empty

getMaxXor({42}, {75}, 2)
set0list0 = {42}
set0list1 = {}
set1list0 = {75}
set1list1 = {}

getMaxXor({42}, {75}, 1)
set0list0 = {}
set0list1 = {42}
set1list0 = {}
set1list1 = {75}

getMaxXor({42}, {75}, 0)
set0list0 = {42}
set0list1 = {}
set1list0 = {}
set1list1 = {75}

getMaxXor({42}, {75}, -1)

In the recursive calls above, the max value is returned by the path:
getMaxXor({42, 5, 22, 23, 8, 1, 17,30}, {69, 75, 99}, 5) //maxValue = 32
getMaxXor({5, 22, 23, 8, 1, 17, 30}, {99}, 4) //maxValue = 16
getMaxXor({22, 23, 17, 30}, {99}, 3) //maxValue = 8
getMaxXor({30}, {99}, 2) //maxValue = 4
getMaxXor{{30}, {99}, 1} //maxValue = 0
getMaxXor({30}, {99}, 0) //maxValue = 1
getMaxXor({30}, {99}, -1) //maxValue = 0

So, the final max XOR value returned = 64 + 32 + 16 + 8 + 4 + 1 = 125.

The run time is O(n) because we iterate 31 times, once for each bit position (i.e. bits 30 to 0). During each bit position, we check/visit each number at most once. So, the time complexity would be 31xn or O(n).
*/